<?xml version="1.0" encoding="utf-8"?>

<configuration>

  <configSections>

    <section name="reflectionCache"
             type="System.Runtime.Caching.Configuration.MemoryCacheSection, System.Runtime.Caching, Version= 4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />

    <section name="complexConfigStringSerializers"
             type="CVB.NET.Configuration.ConfigurationElementPropertySerialization.ConfigurationElements.ConfigStringSerializerSection, CVB.NET.Configuration" />

    <section name="bootstrap"
             type="CVB.NET.Configuration.Ioc.ConfigurationElements.ServiceLocationSection, CVB.NET.Configuration" />

  </configSections>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
  </startup>

  <reflectionCache configSource="CVB.NET.ReflectionCache.config" />

  <complexConfigStringSerializers configSource="CVB.NET.Configuration.PropertySerializers.config" />

  <!-- Bootstrap services -->
  <bootstrap>

    <!-- Custom service location container -->
    <dependency interfaceType="CVB.NET.DataAccess.Repository.IQueryableCrudRepository`1[[CVB.NET.DataAccess.Sql.TreeModelRepository.Schema.ModelBase, CVB.NET.DataAccess.Sql, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], CVB.NET.DataAccess, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
                implementationType="CVB.NET.DataAccess.Sql.MsSqlQueryableCrudRepository`1[[CVB.NET.DataAccess.Sql.TreeModelRepository.Schema.ModelBase, CVB.NET.DataAccess.Sql, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], CVB.NET.DataAccess.Sql, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null">

      <constructor>
        <argument name="database" value="DSS.Core" />
        
        <argument name="sqlConnection">
          <inject>
            <argument name="connectionString" value="Data Source=CVB-D;Initial Catalog=DSS.Core;Persist Security Info=True;User ID=sa;Password=X747x747;MultipleActiveResultSets=True" />
          </inject>
        </argument>

        <!--<argument name="appConfigSection" value="bootstrap" />
        <argument name="containerId">
          <inject resolve="resolve using current container, put interface type here" />
          ||
          <inject type="if parameter type is interface, put implementation type here">
            <argument name="containerId" value="customServices" />
          </inject>
        </argument> -->
      </constructor>
    </dependency>
    
  </bootstrap>

  <!--
   Custom services 
  <customServices>

    <Dependency ServiceId="FriendlyId" interfaceType="Namespace.Interface" implementationType="Namespace.Class">
    <TParameters>
      <T Type="Namespace.Class" />
    </TParameters>
    <Ctor>
      <argument Name="argumentName" Value="argumentValue" />
    </Ctor>
    <Props>
      <Prop Name="argumentName" Value="argumentValue" />
    </Props>
  </Dependency>

  </customServices>-->

</configuration>